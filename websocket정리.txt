WebSocket이란?
	웹소켓이란 두 프로그램 간의 메시지를 교환하기 위한 통신 방법 중 하나이다.
	웹표준.임
	
웹소켓의 특징
	양방향 통신.
		데이터 송수신을 동시에 처리할 수 있는 통신방법.
		클라이언트와 서버가 서로에게 원할 때 데이터를 주고 받을 수 있다.
		통상적인 Http 통신은 Client가 요청을 보내는 경우에만 Server가 응답하는 단방향 통신
	실시간 네트워킹
		웹 환경에서 연속된 데이터를 빠르게 노출
		여러 단말기에 빠르게 데이터를 교환해야함.

비슷한 기술 ( 이전의 기술 )
	Polling -> 서버로 일정 주기 요청 송신하고 응답을 받는 것
	real-time 통신에서는 언제 통신이 발생할지 예측이 불가능 -> 불필요한 request와 connection을 생성 ( 리소스가 낭비된다 )
	Real-time 통신이라고 부르기 애매할정도의 통신
	
	LongPolling -> 서버에 요청 보내고 이벤트가 생겨 응답 받을 때 까지 연결 종료 X -> 응답 받으면 끊고 다시 재요청
	많은 양의 메세지가 쏟아질 경우 polling과 같다.
	
	Streaming -> 서버에 요청 보내고 끊기지 않은 연결상태에서 끊임없이 데이터 수신 클라이언트에서 서버로의 데이터 송신이 어렵다.
	
	결과적으로 이 모든 방법이 HTTP를 통해 통신하기 때문에 Request, Response 둘다 Header가 불필요하게 큼.
	
	
웹소켓의 동작방법
	- 핸드 쉐이킹. HTTP or Https 를 사용한다. -> 반드시 Get메서드를 사용해야함
	헤더의 정보
	
	GET /chat Http/1.1
	 Host: server.example.com -> 웹소켓 서버의 주소
	 Upgrade: websocket -> 현재 클라이언트 , 서버 ,전송 프로토콜 연결에서 다른 프로토콜로 업그레이드 또는 변경하기 위한 규칙.
	 Connection: Upgrade -> Upgrade 헤더 필드가 명시되었을 경우, 송신자는 반드시 Upgrade 옵션을 지정한 Connection 헤더 필드도 전송
	 Sec-WebSocket-Key: 길이가 16바이트인 임의로 머시기저시기... 신원을 인증한다.
	 Origin: http://example.com -> 클라이언트로 웹 브라우저를 사용하는 경우에 필수 항목으로, 클라이언트의 주소.
	 Sec-WebSocket-Protocol: chat, superchat -> 클라이언트가 요청하는 여러 서브프로토콜을 의미,  공백문자로 구분되며 순서에 따라 우선권이 부여, 서버에서 여러 프로토콜 버전을 나눠서 서비스할 경우 필요한 정보.
	 Sec-WebSocket-Version: 13
	
	응답의 경우
	HTTP/1.1 101 Switching Protocols -> 101 Switching Protocols가 Response로 오면 웹소켓이 연결됨.
	등등..
	
	핸드 쉐이크 완료 후 프로토콜이 ws로 변경됨
	wss -> ssl 적용 프로토콜
	
	Message라는 단위를 사용하는데 이것은 여러 frame이 모여서 구성하는 하나의 논리적 메세지 단위
	frame -> communication에서 가장 작은 단위의 데이터
	frame의 구성은 작은헤더 + payload로 구성되어있음. 웹소켓 통신에 사용되는 데이터는 UTF8인코딩
	0x00(보내고 싶은 데이터)0xff
	
	close 시 close frame 사용하며 종료
	
웹 소켓 프로토콜 특징
	최초 접속에서만 http 프로토콜 위에서 handshaking을 하기 때문에 http header를 사용한다.
	웹소켓을 위한 별도의 포트는 없으면 기존포트 (80 , 443)을 사용
	프레임으로 구성된 메시지라는 논리적 단위로 송수신.
	메시지에 포함될 수 있는 교환 가능한 메시지는 텍스트와 바이너리.
	
웹소켓 한계
	HTML5이전 기술로 구현된것에서는?
	Socket.io , SockJS HTML5 이전의 기술로 구현된 서비스에서 웹 소켓처럼 사용할 수 있도록 도와주는 기술.
	Javascript를 이용하여 브라우저 종류에 상관없이 실시간 웹을 구현
	즉, 브라우저와 웹 서버의 종류와 버전을 파악하여 가장 적합한 기술을 선택하여 사용하는 방식.
	
	문자열들을 주고 받을 수 있게 해줄 뿐, 그이상의 일 x
	주고 받은 문자열의 해독은 온전히 어플리케이션에 맡긴다.
	HTTP는 형식을 정해두었기 때문에 모두가 약속을 따르기만 하면 해석할 수 있다.
	하지만 WebSocket은 형식이 정해져 있지 않기 때문에 어플리케이션에서 쉽게 해석하기 힘들다.
	때문에 WebSocket 방식은 sub-protocols을 사용해서 주고 받는 메시지의 형태를 약속하는 경우가 많다.
	
	그래서 나오는게 
STOMP
	STOMP는 채팅 통신을 하기 위한 형식을 정의
	HTTP와 유사하게 간단히 정의되어 해석하기 편한 프로토콜.
	일반적으로 웹소켓 위에서 사용
	
	프레임 구조
	
	COMMAND
	header:value1
	header:value2
	
	BODYBODYBODYBODY^@
	
	프레임 기반의 프로토콜이다. 프레임은 명령, 헤더 ,바디로 구성된다.
	자주 사용되는 명령은 CONNECT, SEND , SUBSCRIBE, DISCONNECT 등이 있다.
	헤더와 바디는 빈 라인으로 구분하며, 바디의 끝은 NULL 문자로 설정한다.
	
	
	
	
봐야하는거 https://www.youtube.com/watch?v=rvss-_t6gzg